# Generated by Django 5.0.4 on 2024-11-11 09:54

import antivienas.database.models
import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_id_verified', models.BooleanField(default=False)),
                ('id_img', models.ImageField(blank=True, null=True, upload_to=antivienas.database.models.user_img_upload_path)),
                ('profile_type', models.CharField(choices=[('User', 'User'), ('Friend', 'Friend')], default='User', max_length=6)),
                ('birthday', models.DateField(default=datetime.date(1998, 5, 14))),
                ('city', models.CharField(blank=True, choices=[('Vilnius', 'Vilnius'), ('Kaunas', 'Kaunas'), ('Klaipėda', 'Klaipeda'), ('Šiauliai', 'Siauliai'), ('Panevėžys', 'Panevezys'), ('Akmenė', 'Akmene'), ('Alytus', 'Alytus'), ('Anykščiai', 'Anyksciai'), ('Birštonas', 'Birstonas'), ('Biržai', 'Birzai'), ('Druskininkai', 'Druskininkai'), ('Elektrėnai', 'Elektrenai'), ('Gargždai', 'Gargzdai'), ('Ignalina', 'Ignalina'), ('Jonava', 'Jonava'), ('Joniškis', 'Joniskis'), ('Jurbarkas', 'Jurbarkas'), ('Kaišiadorys', 'Kaisiadorys'), ('Kalvarija', 'Kalvarija'), ('Kazlų Rūda', 'Kazlu Ruda'), ('Kėdainiai', 'Kedainiai'), ('Kelmė', 'Kelme'), ('Krekenava', 'Krekenava'), ('Kretinga', 'Kretinga'), ('Kupiškis', 'Kupiskis'), ('Kuršėnai', 'Kursenai'), ('Lazdijai', 'Lazdijai'), ('Lentvaris', 'Lentvaris'), ('Marijampolė', 'Marijampole'), ('Mažeikiai', 'Mazeikiai'), ('Molėtai', 'Moletai'), ('Naujoji Akmenė', 'Naujoji Akmene'), ('Nemenčinė', 'Nemencine'), ('Neringa', 'Neringa'), ('Pabradė', 'Pabrade'), ('Pagėgiai', 'Pagegiai'), ('Pakruojis', 'Pakruojis'), ('Palanga', 'Palanga'), ('Pasvalys', 'Pasvalys'), ('Plungė', 'Plunge'), ('Prienai', 'Prienai'), ('Radviliškis', 'Radviliskis'), ('Raseiniai', 'Raseiniai'), ('Rietavas', 'Rietavas'), ('Rokiškis', 'Rokiskis'), ('Šakiai', 'Sakiai'), ('Šalčininkai', 'Salcininkai'), ('Šilalė', 'Silale'), ('Šilutė', 'Silute'), ('Širvintos', 'Sirvintos'), ('Skuodas', 'Skuodas'), ('Švenčionys', 'Svencionys'), ('Tauragė', 'Taurage'), ('Telšiai', 'Telsiai'), ('Trakai', 'Trakai'), ('Ukmergė', 'Ukmerge'), ('Utena', 'Utena'), ('Varėna', 'Varena'), ('Vievis', 'Vievis'), ('Vilkaviškis', 'Vilkaviskis'), ('Visaginas', 'Visaginas'), ('Zarasai', 'Zarasai')], max_length=15, null=True)),
                ('job', models.CharField(blank=True, max_length=40)),
                ('description', models.TextField(blank=True, max_length=2500)),
                ('gender', models.CharField(blank=True, choices=[('Vyras', 'Vyras'), ('Moteris', 'Moteris')], max_length=10, null=True)),
                ('education', models.CharField(blank=True, choices=[('Pagrindinis', 'Pagrindinis'), ('Vidurinis', 'Vidurinis'), ('Aukštasis', 'Aukstasis'), ('Aukštesnysis', 'Aukstesnysis'), ('Pradinis', 'Pradinis')], max_length=15, null=True)),
                ('img_one', models.ImageField(default='/user-no-avatar.png', storage=antivienas.database.models.OverwriteStorage(), upload_to=antivienas.database.models.user_img_upload_path)),
                ('img_two', models.ImageField(blank=True, null=True, storage=antivienas.database.models.OverwriteStorage(), upload_to=antivienas.database.models.user_img_upload_path)),
                ('img_three', models.ImageField(blank=True, null=True, storage=antivienas.database.models.OverwriteStorage(), upload_to=antivienas.database.models.user_img_upload_path)),
                ('interest_one', models.CharField(blank=True, max_length=50)),
                ('interest_two', models.CharField(blank=True, max_length=50)),
                ('interest_three', models.CharField(blank=True, max_length=50)),
                ('interest_four', models.CharField(blank=True, max_length=50)),
                ('interest_color_one', models.CharField(choices=[('#D9D9D9', 'Gray'), ('#F6C4C4', 'Red'), ('#B2D8EE', 'Blue'), ('#B8F2C1', 'Green'), ('#F1B8F2', 'Purple'), ('#F6EAA5', 'Yellow')], default='#D9D9D9', max_length=7)),
                ('interest_color_two', models.CharField(choices=[('#D9D9D9', 'Gray'), ('#F6C4C4', 'Red'), ('#B2D8EE', 'Blue'), ('#B8F2C1', 'Green'), ('#F1B8F2', 'Purple'), ('#F6EAA5', 'Yellow')], default='#D9D9D9', max_length=7)),
                ('interest_color_three', models.CharField(choices=[('#D9D9D9', 'Gray'), ('#F6C4C4', 'Red'), ('#B2D8EE', 'Blue'), ('#B8F2C1', 'Green'), ('#F1B8F2', 'Purple'), ('#F6EAA5', 'Yellow')], default='#D9D9D9', max_length=7)),
                ('interest_color_four', models.CharField(choices=[('#D9D9D9', 'Gray'), ('#F6C4C4', 'Red'), ('#B2D8EE', 'Blue'), ('#B8F2C1', 'Green'), ('#F1B8F2', 'Purple'), ('#F6EAA5', 'Yellow')], default='#D9D9D9', max_length=7)),
                ('orders_completed', models.PositiveIntegerField(default=0)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='FriendSetting',
            fields=[
                ('friend', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('price_per_hour', models.PositiveIntegerField(default=0)),
                ('is_public', models.BooleanField(default=False)),
                ('account_number', models.CharField(blank=True, max_length=20)),
                ('account_holder_details', models.CharField(blank=True, max_length=200)),
                ('level', models.SmallIntegerField(choices=[(1, 'Naujokas'), (2, 'Patyręs'), (3, 'Ekspertas'), (4, 'Veteranas')], default=1)),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('meeting_day', models.DateField()),
                ('meeting_hour', models.CharField(choices=[('09:00', '09:00'), ('09:30', '09:30'), ('10:00', '10:00'), ('10:30', '10:30'), ('11:00', '11:00'), ('11:30', '11:30'), ('12:00', '12:00'), ('12:30', '12:30'), ('13:00', '13:00'), ('13:30', '13:30'), ('14:00', '14:00'), ('14:30', '14:30'), ('15:00', '15:00'), ('15:30', '15:30'), ('16:00', '16:00'), ('16:30', '16:30'), ('17:00', '17:00'), ('17:30', '17:30'), ('18:00', '18:00'), ('18:30', '18:30'), ('19:00', '19:00'), ('19:30', '19:30'), ('20:00', '20:00')], max_length=6)),
                ('no_of_hours', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(72)])),
                ('meeting_place', models.CharField(max_length=300)),
                ('comment', models.TextField(max_length=1500)),
                ('cancel_reason', models.TextField(blank=True, max_length=300)),
                ('total_price', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('order_status', models.SmallIntegerField(choices=[(1, 'Initiated'), (2, 'Confirmed'), (3, 'Paid'), (4, 'Complete'), (5, 'Cancelled'), (6, 'Abandoned'), (7, 'Disputed'), (8, 'Failed')], default=1)),
                ('confirmation_code', models.SmallIntegerField(default=5346)),
                ('is_disputable', models.BooleanField(default=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
                ('friend', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='database.friendsetting')),
            ],
        ),
        migrations.CreateModel(
            name='Dispute',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_comment', models.TextField(blank=True, max_length=2000)),
                ('friend_comment', models.TextField(blank=True, max_length=2000)),
                ('is_solved', models.BooleanField(default=False)),
                ('in_review', models.BooleanField(default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='database.order')),
            ],
        ),
    ]
